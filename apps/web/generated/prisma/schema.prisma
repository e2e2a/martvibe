// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL")
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * if there are changes
 * 1. npx prisma migrate dev --name CLARIFIED_NAME_CHANGES
 * 2. npx prisma generate
 */

enum Role {
  OWNER
  SELLER
  BUYER
  ADMIN
}

model Account {
  id                String    @id @default(cuid())
  userId            Int
  providerAccountId String
  access_token      String?
  expires_at        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])

  @@unique([providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  username      String?
  role          Role?
  profile       Profile?
  verified      Boolean   @default(false)
  verified_date DateTime?
  revoke        Boolean   @default(false)
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Profile {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @unique
  bio           String
  firstname     String
  middlename    String?
  lastname      String
  suffix        String?
  // For Owner
  store_owner   Store[]   @relation("StoreOwner")
  // For Seller
  store_seller  Store[]   @relation("ProfileStore")
  approved      Boolean?
  approved_date DateTime?
  sale          Sale[]
  //
  Product       Product[]
  verified      Boolean   @default(false)
  verified_date DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Store {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  ownerId   Int?
  owner     Profile?  @relation("StoreOwner", fields: [ownerId], references: [id])
  seller    Profile[] @relation("ProfileStore")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// enum Unit {
//   pcs
//   tray
//   box
//   ml
//   g
//   kg
//   liter
// }

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  profileId   Int
  profile     Profile    @relation(fields: [profileId], references: [id])
  price       Decimal    @db.Decimal(10, 2)
  description String?
  imageUrl    String?
  weightUnit  String? // ex: product: vinegar, weightUnit: ml , weightValue: '750' // ex2: ex: product: egg, weightUnit: Small , weightValue: null
  weightValue String?
  quantity    Int?
  unit        String?
  unitValue   Int?
  category    Category[] @relation("ProductCategories")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  sales       Sale[]
}

model Sale {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  saledId   Int?
  saledBy   Profile? @relation(fields: [saledId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[] @relation("ProductCategories")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
